{"version":3,"sources":["styled.js","common/Header/styled.js","common/Header/index.js","common/Section/styled.js","common/Section/index.js","features/tasks/tasksLocaleStorage.js","features/tasks/tasksSlice.js","features/tasks/Form/styled.js","features/tasks/Form/index.js","features/tasks/Buttons/styled.js","features/tasks/Buttons/index.js","features/tasks/TasksList/styled.js","features/tasks/TasksList/index.js","features/tasks/Tasks.js","App.js","reportWebVitals.js","globalStyle.js","features/tasks/getExampleTasks.js","features/tasks/tasksSaga.js","rootSaga.js","store.js","index.js","theme.js"],"names":["Wrapper","styled","div","MainHeader","header","Header","title","SectionWrapper","section","theme","color","white","alto","breakPoint","mobileMax","Title","h2","Body","Section","extraHeaderContent","body","localStorageKey","saveTasksInLocalStorage","tasks","localStorage","setItem","JSON","stringify","tasksSlice","createSlice","name","initialState","parse","getItem","hideDone","reducers","addTask","task","payload","push","removeTask","taskId","index","findIndex","id","splice","toggleHideDone","state","toggleTaskDone","done","setAllDone","forEach","fetchExampleTasks","setTasks","actions","selectTasksState","selectTasks","selectHideDone","selectAreTaskEmpty","length","selectIsEveryTaskDone","every","StyledForm","form","Input","input","Button","button","teal","Form","useState","newTaskContent","setNewTaskContent","dispatch","useDispatch","inputRef","useRef","focusInput","current","focus","onSubmit","event","preventDefault","trimmedNewTaskConetent","trim","content","nanoid","value","placeholder","onChange","target","ref","autoFocus","onClick","silver","Buttons","areTaskEmpty","useSelector","isEveryTaskDone","disabled","List","ul","Item","li","hidden","css","Content","span","toggleDone","forestGreen","remove","crimson","TasksList","map","Tasks","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","GlobalStyle","createGlobalStyle","gallery","getExampleTasks","a","fetch","response","ok","Error","statusText","json","fetchExampleTasksHandler","saveTaskInLocalStorageHandler","tasksSaga","delay","call","exampleTasks","put","alert","select","takeLatest","type","takeEvery","rootSaga","all","sagaMiddleware","createSagaMiddleware","store","configureStore","reducer","tasksReducer","middleware","run","ReactDOM","render","StrictMode","black","document","getElementById"],"mappings":"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","file":"static/js/main.a2a80640.chunk.js","sourcesContent":["import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.div`\r\n    max-width: 900px;\r\n    margin: 0 auto;\r\n    padding: 20px;\r\n`;","import styled from \"styled-components\";\r\n\r\nexport const MainHeader = styled.header`\r\n    margin: 10px 0;\r\n`;","import { MainHeader } from \"./styled\";\r\n\r\nconst Header = ({ title }) => (\r\n  <MainHeader>\r\n    <h1>{title}</h1>\r\n  </MainHeader>\r\n);\r\n\r\nexport default Header;","import styled from \"styled-components\";\r\n\r\nexport const SectionWrapper = styled.section`\r\n    margin: 10px 0;\r\n    background: ${({ theme }) => theme.color.white};\r\n    box-shadow:  0 0 5px ${({ theme }) => theme.color.alto};;\r\n`;\r\n\r\nexport const Header = styled.header`\r\n    border-bottom: 1px solid ${({ theme }) => theme.color.alto};;\r\n    display: grid;\r\n    grid-template-columns: auto auto;\r\n    grid-gap: 20px;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    padding: 20px;\r\n\r\n    \r\n    @media (max-width: ${({ theme }) => theme.breakPoint.mobileMax}px) {\r\n        grid-template-columns: 1fr;\r\n    }\r\n`;\r\n\r\nexport const Title = styled.h2`\r\n    font-size: 20px;\r\n    margin: 0;\r\n`;\r\n\r\nexport const Body = styled.div`\r\n    padding: 20px;\r\n`;","import { SectionWrapper, Header, Title, Body } from \"./styled\";\r\n\r\n\r\nconst Section = ({ title, extraHeaderContent, body }) => (\r\n  <SectionWrapper>\r\n    <Header>\r\n      <Title>{title}</Title>\r\n      {extraHeaderContent}\r\n    </Header>\r\n    <Body>\r\n      {body}\r\n    </Body>\r\n  </SectionWrapper>\r\n);\r\n\r\nexport default Section;","const localStorageKey = \"tasks\";\r\n\r\nexport const saveTasksInLocalStorage = tasks => localStorage.setItem(localStorageKey, JSON.stringify(tasks));\r\n\r\nexport const getTasksFromLocalStorage = () => JSON.parse(localStorage.getItem(localStorageKey)) || [];","import { createSlice } from '@reduxjs/toolkit';\r\nimport { getTasksFromLocalStorage } from './tasksLocaleStorage';\r\n\r\nconst tasksSlice = createSlice({\r\n    name: 'tasks',\r\n    initialState: {\r\n        tasks: getTasksFromLocalStorage(),\r\n        hideDone: false,\r\n    },\r\n    reducers: {\r\n        addTask: ({ tasks }, { payload: task }) => {\r\n            tasks.push(task);\r\n        },\r\n        removeTask: ({ tasks }, { payload: taskId }) => {\r\n            const index = tasks.findIndex(({ id }) => id === taskId);\r\n            tasks.splice(index, 1);\r\n        },\r\n        toggleHideDone: state => {\r\n            state.hideDone = !state.hideDone;\r\n        },\r\n        toggleTaskDone: ({ tasks }, { payload: taskId }) => {\r\n            const index = tasks.findIndex(({ id }) => id === taskId);\r\n            tasks[index].done = !tasks[index].done;\r\n        },\r\n        setAllDone: ({ tasks }) => {\r\n            tasks.forEach(task => {\r\n                task.done = true;\r\n            });\r\n        },\r\n        fetchExampleTasks: () => {},\r\n        setTasks: (state, {payload: tasks}) => {\r\n            state.tasks = tasks;\r\n        },\r\n    },\r\n});\r\n\r\nexport const { \r\n    addTask, \r\n    removeTask, \r\n    toggleHideDone, \r\n    toggleTaskDone, \r\n    setAllDone,\r\n    fetchExampleTasks, \r\n    setTasks,\r\n} = tasksSlice.actions;\r\n\r\nconst selectTasksState = state => state.tasks;\r\n\r\nexport const selectTasks = state => selectTasksState(state).tasks;\r\nexport const selectHideDone = state => selectTasksState(state).hideDone;\r\nexport const selectAreTaskEmpty = state => selectTasks(state).length === 0;\r\nexport const selectIsEveryTaskDone = state => selectTasks(state).every(({done}) => done);\r\n  \r\nexport default tasksSlice.reducer;","import styled from \"styled-components\";\r\n\r\nexport const StyledForm = styled.form`\r\n    display: flex;\r\n    padding: 15px 0px;\r\n\r\n    @media (max-width: ${({ theme }) => theme.breakPoint.mobileMax}px) {\r\n        flex-direction: column;\r\n    }\r\n`;\r\n\r\nexport const Input = styled.input`\r\n    padding: 10px;\r\n    flex-grow: 1;\r\n    margin-right: 15px;\r\n    border: 1px solid ${({ theme }) => theme.color.alto};\r\n\r\n    @media (max-width: ${({ theme }) => theme.breakPoint.mobileMax}px) {\r\n        margin: 10px 0;\r\n    }\r\n`;\r\n\r\nexport const Button = styled.button`\r\n    background-color: ${({ theme }) => theme.color.teal};\r\n    color: ${({ theme }) => theme.color.white};\r\n    padding: 0 20px;\r\n    transition: 0.3s;\r\n    border: none;\r\n\r\n    @media (max-width: ${({ theme }) => theme.breakPoint.mobileMax}px) {\r\n        padding: 10px 0;\r\n    }\r\n\r\n    &:hover {\r\n        filter: brightness(110%);\r\n        transform: scale(1.1);\r\n        cursor: pointer;\r\n\r\n        @media (max-width: ${({ theme }) => theme.breakPoint.mobileMax}px) {\r\n            transform: scale(1.04);\r\n        }\r\n    }\r\n\r\n    &:active {\r\n        filter: brightness(120%);\r\n    }\r\n`;","import { useState, useRef } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { nanoid } from \"@reduxjs/toolkit\";\r\nimport { addTask } from \"../tasksSlice\";\r\nimport { StyledForm, Input, Button } from \"./styled\";\r\n\r\nconst Form = () => {\r\n  const [newTaskContent, setNewTaskContent] = useState(\"\");\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const inputRef = useRef(null);\r\n  const focusInput = () => {\r\n    inputRef.current.focus();\r\n  };\r\n\r\n  const onFormSubmit = (event) => {\r\n    event.preventDefault();\r\n\r\n    const trimmedNewTaskConetent = newTaskContent.trim();\r\n\r\n    if (!trimmedNewTaskConetent) {\r\n      return;\r\n    }\r\n\r\n    dispatch((addTask({\r\n      content: trimmedNewTaskConetent,\r\n      done: false,\r\n      id: nanoid(),\r\n    })));\r\n\r\n    setNewTaskContent(\"\");\r\n    focusInput();\r\n  };\r\n\r\n  return (\r\n    <StyledForm onSubmit={onFormSubmit}>\r\n      <Input\r\n        value={newTaskContent}\r\n        placeholder=\"Co jest do zrobienia?\"\r\n        onChange={({ target }) => setNewTaskContent(target.value)}\r\n        ref={inputRef}\r\n        autoFocus\r\n      />\r\n      <Button onClick={focusInput}>Dodaj zadanie</Button>\r\n    </StyledForm>\r\n  )\r\n};\r\n\r\nexport default Form;","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.div`\r\n    display: grid;\r\n    grid-template-columns: auto auto;\r\n\r\n    @media (max-width:${({ theme }) => theme.breakPoint.mobileMax}px) {\r\n        grid-template-columns: 1fr;\r\n    }\r\n`;\r\n\r\nexport const Button = styled.button`\r\n    background-color: ${({ theme }) => theme.color.white};\r\n    color: ${({ theme }) => theme.color.teal};\r\n    border-style: none;\r\n    padding: 15px 15px;\r\n    transition: 0.3s;\r\n\r\n    &:hover:not([disabled]) {\r\n        filter: brightness(110%);\r\n        cursor: pointer;\r\n    }\r\n\r\n    &:active:not([disabled]) {\r\n        filter: brightness(120%);\r\n    }\r\n\r\n    &:disabled {\r\n        color: ${({ theme }) => theme.color.silver};\r\n        cursor: not-allowed;\r\n    }\r\n`;","import { useSelector, useDispatch } from \"react-redux\";\r\nimport {\r\n  toggleHideDone,\r\n  setAllDone,\r\n  selectAreTaskEmpty,\r\n  selectIsEveryTaskDone,\r\n  selectHideDone,\r\n  fetchExampleTasks\r\n} from \"../tasksSlice\";\r\nimport { Wrapper, Button } from \"./styled\";\r\n\r\nconst Buttons = () => {\r\n  const areTaskEmpty = useSelector(selectAreTaskEmpty);\r\n  const isEveryTaskDone = useSelector(selectIsEveryTaskDone);\r\n  const hideDone = useSelector(selectHideDone);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    <Wrapper>\r\n      <Button onClick={() => dispatch(fetchExampleTasks())}>\r\n        Pobierz przykładowe zadania\r\n      </Button>\r\n      {!areTaskEmpty && (\r\n        <>\r\n          <Button\r\n            onClick={() => dispatch(toggleHideDone())}\r\n          >\r\n            {hideDone ? \"Pokaż\" : \"Ukryj\"} ukończone\r\n          </Button>\r\n          <Button\r\n            onClick={() => dispatch(setAllDone())}\r\n            disabled={isEveryTaskDone}\r\n          >\r\n            Ukończ wszystkie\r\n          </Button>\r\n        </>\r\n      )}\r\n    </Wrapper>\r\n  )\r\n};\r\n\r\nexport default Buttons;","import styled, { css } from \"styled-components\";\r\n\r\nexport const List = styled.ul`\r\n    list-style: none;\r\n    padding-left: 0;\r\n`;\r\n\r\nexport const Item = styled.li`\r\n    font-size: 18px;\r\n    padding: 10px;\r\n    border-bottom: solid 1px ${({ theme }) => theme.color.alto};;\r\n    display: flex;\r\n    align-items: center;\r\n    word-break: break-word; \r\n\r\n    ${({ hidden }) => hidden && css`\r\n        display: none;\r\n    `}\r\n`;\r\n\r\nexport const Content = styled.span`\r\n    padding: 0px 15px;\r\n    flex-grow: 1;\r\n\r\n    ${({ done }) => done && css`\r\n        text-decoration: line-through;\r\n    `}  \r\n`;\r\n\r\nexport const Button = styled.button`\r\n    color: ${({ theme }) => theme.color.white};\r\n    width: 30px;\r\n    height: 30px;\r\n    border: none;\r\n    justify-self: center;\r\n    transition: 0.3s;\r\n\r\n    ${({ toggleDone }) => toggleDone && css`\r\n        background-color: ${({ theme }) => theme.color.forestGreen};\r\n    `}\r\n\r\n    ${({ remove }) => remove && css`\r\n        background-color: ${({ theme }) => theme.color.crimson};\r\n    `}\r\n\r\n    &:hover {\r\n            filter: brightness(110%);\r\n            cursor: pointer;\r\n        }\r\n\r\n        &:active {\r\n            filter: brightness(120%);\r\n        }\r\n`;","import { useSelector, useDispatch } from \"react-redux\";\r\nimport { selectTasks, removeTask, toggleTaskDone, selectHideDone } from \"../tasksSlice\";\r\nimport { List, Item, Content, Button } from \"./styled\";\r\n\r\nconst TasksList = () => {\r\n  const tasks = useSelector(selectTasks);\r\n  const hideDone = useSelector(selectHideDone);\r\n\r\n  const dispatch = useDispatch();\r\n  \r\n  return (\r\n    <List>\r\n      {tasks.map(task => (\r\n        <Item\r\n          key={task.id}\r\n          hidden={task.done && hideDone}\r\n        >\r\n          <Button\r\n            onClick={() => dispatch(toggleTaskDone(task.id))}\r\n            toggleDone\r\n          >\r\n            <span>{task.done ? \"✔\" : \"\"}</span>\r\n          </Button>\r\n          <Content done={task.done}>\r\n            {task.content}\r\n          </Content>\r\n          <Button\r\n            onClick={() => dispatch(removeTask(task.id))}\r\n            remove\r\n          >\r\n            🗑\r\n          </Button>\r\n        </Item>\r\n      ))}\r\n    </List>\r\n  )\r\n};\r\n\r\nexport default TasksList;","import { Wrapper } from \"../../styled.js\";\nimport Header from \"../../common/Header\";\nimport Section from \"../../common/Section\";\nimport Form from \"./Form\";\nimport Buttons from \"./Buttons\";\nimport TasksList from \"./TasksList\";\n\nfunction Tasks() {\n  return (\n    <Wrapper>\n      <Header title=\"Lista zadań\" />\n      <Section\n        title=\"Dodaj nowe zadanie\"\n        body={<Form />}\n      />\n      <Section\n        title=\"Lista zadań\"\n        extraHeaderContent={<Buttons />}\n        body={<TasksList />}\n      />\n    </Wrapper>\n  );\n}\n\nexport default Tasks;","import Tasks from \"./features/tasks/Tasks\";\r\n\r\nconst App = () => <Tasks />;\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { createGlobalStyle } from \"styled-components\";\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n    html {\r\n        box-sizing: border-box;\r\n    }\r\n\r\n    *, ::after, ::before {\r\n        box-sizing: inherit;\r\n    }\r\n\r\n    body {\r\n        font-family: 'Montserrat', sans-serif;\r\n        background-color: ${({ theme }) => theme.color.gallery};\r\n    }\r\n`;","export const getExampleTasks = async () => {\r\n    const response = await fetch(\"/taskList-react/exampleTasks.json\");\r\n\r\n    if(!response.ok) {\r\n        new Error(response.statusText);\r\n    }\r\n\r\n    return await response.json();\r\n}; ","import { takeLatest, call, put, delay, takeEvery, select } from \"redux-saga/effects\";\r\nimport { fetchExampleTasks, selectTasks, setTasks } from \"./tasksSlice\";\r\nimport { getExampleTasks } from \"./getExampleTasks\";\r\nimport { saveTasksInLocalStorage } from \"./tasksLocaleStorage\";\r\n\r\nfunction* fetchExampleTasksHandler() {\r\n    try {\r\n        yield delay(1000);\r\n        const exampleTasks = yield call(getExampleTasks);\r\n        yield put(setTasks(exampleTasks));\r\n    } catch (error) {\r\n        yield call(alert, \"Coś poszło nie tak!\");\r\n    }\r\n}\r\n\r\nfunction* saveTaskInLocalStorageHandler() {\r\n    const tasks = yield select(selectTasks);\r\n    yield call(saveTasksInLocalStorage, tasks);\r\n}\r\n\r\nexport function* tasksSaga() {\r\n    yield takeLatest(fetchExampleTasks.type, fetchExampleTasksHandler);\r\n    yield takeEvery(\"*\", saveTaskInLocalStorageHandler)\r\n}","import { all } from \"redux-saga/effects\";\r\nimport { tasksSaga } from \"./features/tasks/tasksSaga\";\r\n\r\nexport default function* rootSaga() {\r\n    yield all([\r\n        tasksSaga(),\r\n    ]);\r\n}","import { configureStore } from '@reduxjs/toolkit';\r\nimport createSagaMiddleware from \"redux-saga\";\r\nimport rootSaga from \"./rootSaga\";\r\nimport tasksReducer from './features/tasks/tasksSlice';\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\n\r\nconst store = configureStore({\r\n    reducer: {\r\n        tasks: tasksReducer,\r\n    },\r\n    middleware: [sagaMiddleware],\r\n});\r\n\r\nsagaMiddleware.run(rootSaga);\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { ThemeProvider } from 'styled-components';\nimport { Provider } from \"react-redux\";\nimport { theme } from \"./theme\";\nimport { GlobalStyle } from \"./globalStyle\";\nimport store from \"./store\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <ThemeProvider theme={theme}>\n        <GlobalStyle />\n        <App />\n      </ThemeProvider>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","export const theme = {\r\n    color: {\r\n        black: \"#000\",\r\n        silver: \"#ccc\",\r\n        alto: \"#ddd\",\r\n        gallery: \"$eee\",\r\n        crimson: \"#db143c\",\r\n        white: \"#fff\",\r\n        teal: \"#008080\",\r\n        forestGreen: \"#228c22\",\r\n    },\r\n    breakPoint: {\r\n        mobileMax: 767,\r\n    },\r\n};"],"sourceRoot":""}