{"version":3,"sources":["styled.js","common/Header/styled.js","common/Header/index.js","common/Section/styled.js","common/Section/index.js","features/tasks/tasksSlice.js","features/tasks/Form/styled.js","features/tasks/Form/index.js","features/tasks/Buttons/styled.js","features/tasks/Buttons/index.js","features/tasks/TasksList/styled.js","features/tasks/TasksList/index.js","features/tasks/Tasks.js","App.js","reportWebVitals.js","globalStyle.js","store.js","index.js","theme.js"],"names":["Wrapper","styled","div","MainHeader","header","Header","title","SectionWrapper","section","theme","color","white","alto","breakPoint","mobileMax","Title","h2","Body","Section","extraHeaderContent","body","tasksSlice","createSlice","name","initialState","tasks","hideDone","reducers","addTask","payload","push","removeTask","index","findIndex","id","splice","toggleHideDone","state","toggleTaskDone","done","setAllDone","forEach","task","actions","selectTasks","StyledForm","form","Input","input","Button","button","teal","Form","useState","newTaskContent","setNewTaskContent","dispatch","useDispatch","inputRef","useRef","focusInput","current","focus","onSubmit","event","preventDefault","trimmedNewTaskConetent","trim","content","nanoid","value","placeholder","onChange","target","ref","autoFocus","onClick","silver","Buttons","useSelector","length","disabled","every","List","ul","Item","li","hidden","css","Content","span","toggleDone","forestGreen","remove","crimson","TasksList","map","Tasks","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","GlobalStyle","createGlobalStyle","gallery","configureStore","reducer","tasksReducer","ReactDOM","render","StrictMode","store","black","document","getElementById"],"mappings":"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","file":"static/js/main.e924ece2.chunk.js","sourcesContent":["import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.div`\r\n    max-width: 900px;\r\n    margin: 0 auto;\r\n    padding: 20px;\r\n`;","import styled from \"styled-components\";\r\n\r\nexport const MainHeader = styled.header`\r\n    margin: 10px 0;\r\n`;","import { MainHeader } from \"./styled\";\r\n\r\nconst Header = ({ title }) => (\r\n  <MainHeader>\r\n    <h1>{title}</h1>\r\n  </MainHeader>\r\n);\r\n\r\nexport default Header;","import styled from \"styled-components\";\r\n\r\nexport const SectionWrapper = styled.section`\r\n    margin: 10px 0;\r\n    background: ${({ theme }) => theme.color.white};\r\n    box-shadow:  0 0 5px ${({ theme }) => theme.color.alto};;\r\n`;\r\n\r\nexport const Header = styled.header`\r\n    border-bottom: 1px solid ${({ theme }) => theme.color.alto};;\r\n    display: grid;\r\n    grid-template-columns: auto auto;\r\n    grid-gap: 20px;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    padding: 20px;\r\n\r\n    \r\n    @media (max-width: ${({ theme }) => theme.breakPoint.mobileMax}px) {\r\n        grid-template-columns: 1fr;\r\n    }\r\n`;\r\n\r\nexport const Title = styled.h2`\r\n    font-size: 20px;\r\n    margin: 0;\r\n`;\r\n\r\nexport const Body = styled.div`\r\n    padding: 20px;\r\n`;","import { SectionWrapper, Header, Title, Body } from \"./styled\";\r\n\r\n\r\nconst Section = ({ title, extraHeaderContent, body }) => (\r\n  <SectionWrapper>\r\n    <Header>\r\n      <Title>{title}</Title>\r\n      {extraHeaderContent}\r\n    </Header>\r\n    <Body>\r\n      {body}\r\n    </Body>\r\n  </SectionWrapper>\r\n);\r\n\r\nexport default Section;","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nconst tasksSlice = createSlice({\r\n    name: 'tasks',\r\n    initialState: {\r\n        tasks: [],\r\n        hideDone: false,\r\n    },\r\n    reducers: {\r\n        addTask: ({ tasks }, { payload }) => {\r\n            tasks.push(payload);\r\n        },\r\n        removeTask: ({ tasks }, { payload }) => {\r\n            const index = tasks.findIndex(({ id }) => id === payload);\r\n            tasks.splice(index, 1);\r\n        },\r\n        toggleHideDone: state => {\r\n            state.hideDone = !state.hideDone;\r\n        },\r\n        toggleTaskDone: ({ tasks }, { payload }) => {\r\n            const index = tasks.findIndex(({ id }) => id === payload);\r\ntasks[index].done = !tasks[index].done;\r\n        },\r\nsetAllDone: ({ tasks }) => {\r\n    tasks.forEach(task => {\r\n        task.done = true;\r\n    });\r\n}\r\n    },\r\n});\r\n\r\nexport const { addTask, removeTask, toggleHideDone, toggleTaskDone, setAllDone } = tasksSlice.actions;\r\nexport const selectTasks = state => state.tasks;\r\nexport default tasksSlice.reducer;","import styled from \"styled-components\";\r\n\r\nexport const StyledForm = styled.form`\r\n    display: flex;\r\n    padding: 15px 0px;\r\n\r\n    @media (max-width: ${({ theme }) => theme.breakPoint.mobileMax}px) {\r\n        flex-direction: column;\r\n    }\r\n`;\r\n\r\nexport const Input = styled.input`\r\n    padding: 10px;\r\n    flex-grow: 1;\r\n    margin-right: 15px;\r\n    border: 1px solid ${({ theme }) => theme.color.alto};\r\n\r\n    @media (max-width: ${({ theme }) => theme.breakPoint.mobileMax}px) {\r\n        margin: 10px 0;\r\n    }\r\n`;\r\n\r\nexport const Button = styled.button`\r\n    background-color: ${({ theme }) => theme.color.teal};\r\n    color: ${({ theme }) => theme.color.white};\r\n    padding: 0 20px;\r\n    transition: 0.3s;\r\n    border: none;\r\n\r\n    @media (max-width: ${({ theme }) => theme.breakPoint.mobileMax}px) {\r\n        padding: 10px 0;\r\n    }\r\n\r\n    &:hover {\r\n        filter: brightness(110%);\r\n        transform: scale(1.1);\r\n        cursor: pointer;\r\n\r\n        @media (max-width: ${({ theme }) => theme.breakPoint.mobileMax}px) {\r\n            transform: scale(1.04);\r\n        }\r\n    }\r\n\r\n    &:active {\r\n        filter: brightness(120%);\r\n    }\r\n`;","import { useState, useRef } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { nanoid } from \"@reduxjs/toolkit\";\r\nimport { addTask } from \"../tasksSlice\";\r\nimport { StyledForm, Input, Button } from \"./styled\";\r\n\r\nconst Form = () => {\r\n  const [newTaskContent, setNewTaskContent] = useState(\"\");\r\n  \r\n  const dispatch = useDispatch();\r\n  \r\n  const inputRef = useRef(null);\r\n  const focusInput = () => {\r\n    inputRef.current.focus();\r\n  };\r\n\r\n  const onFormSubmit = (event) => {\r\n    event.preventDefault();\r\n\r\n    const trimmedNewTaskConetent = newTaskContent.trim();\r\n\r\n    if (!trimmedNewTaskConetent) {\r\n      return;\r\n    }\r\n\r\n    dispatch((addTask({\r\n      content: trimmedNewTaskConetent,\r\n      done: false,\r\n      id: nanoid(),  \r\n    })));\r\n\r\n    setNewTaskContent(\"\");\r\n    focusInput();\r\n  };\r\n\r\n  return (\r\n    <StyledForm onSubmit={onFormSubmit}>\r\n      <Input\r\n        value={newTaskContent}\r\n        placeholder=\"Co jest do zrobienia?\"\r\n        onChange={({ target }) => setNewTaskContent(target.value)}\r\n        ref={inputRef}\r\n        autoFocus\r\n      />\r\n      <Button onClick={focusInput}>Dodaj zadanie</Button>\r\n    </StyledForm>\r\n  )\r\n};\r\n\r\nexport default Form;","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.div`\r\n    display: grid;\r\n    grid-template-columns: auto auto;\r\n\r\n    @media (max-width:${({theme}) => theme.breakPoint.mobileMax }px) {\r\n        grid-template-columns: 1fr;\r\n    }\r\n`;\r\n\r\nexport const Button = styled.button`\r\n    background-color: ${({theme}) => theme.color.white};\r\n    color: ${({theme}) => theme.color.teal};\r\n    border-style: none;\r\n    padding: 15px 15px;\r\n    transition: 0.3s;\r\n\r\n    &:hover:not([disabled]) {\r\n        filter: brightness(110%);\r\n        cursor: pointer;\r\n    }\r\n\r\n    &:active:not([disabled]) {\r\n        filter: brightness(120%);\r\n    }\r\n\r\n    &:disabled {\r\n        color: ${({theme}) => theme.color.silver};\r\n        cursor: not-allowed;\r\n    }\r\n`;","import { useSelector, useDispatch } from \"react-redux\";\r\nimport { selectTasks, toggleHideDone, setAllDone } from \"../tasksSlice\";\r\nimport { Wrapper, Button } from \"./styled\";\r\n\r\nconst Buttons = () => {\r\n  const { tasks, hideDone } = useSelector(selectTasks);\r\n  const dispatch = useDispatch();\r\n  return (\r\n    tasks.length > 0 && (\r\n      <Wrapper>\r\n        <Button\r\n          onClick={() => dispatch(toggleHideDone())}\r\n        >\r\n          {hideDone ? \"Pokaż\" : \"Ukryj\"} ukończone\r\n        </Button>\r\n        <Button\r\n          onClick={() => dispatch(setAllDone())}\r\n          disabled={tasks.every(({ done }) => done)}\r\n        >\r\n          Ukończ wszystkie\r\n        </Button>\r\n      </Wrapper>\r\n    )\r\n  )\r\n};\r\n\r\nexport default Buttons;","import styled, { css } from \"styled-components\";\r\n\r\nexport const List = styled.ul`\r\n    list-style: none;\r\n    padding-left: 0;\r\n`;\r\n\r\nexport const Item = styled.li`\r\n    font-size: 18px;\r\n    padding: 10px;\r\n    border-bottom: solid 1px ${({ theme }) => theme.color.alto};;\r\n    display: flex;\r\n    align-items: center;\r\n    word-break: break-word; \r\n\r\n    ${({ hidden }) => hidden && css`\r\n        display: none;\r\n    `}\r\n`;\r\n\r\nexport const Content = styled.span`\r\n    padding: 0px 15px;\r\n    flex-grow: 1;\r\n\r\n    ${({ done }) => done && css`\r\n        text-decoration: line-through;\r\n    `}  \r\n`;\r\n\r\nexport const Button = styled.button`\r\n    color: ${({ theme }) => theme.color.white};\r\n    width: 30px;\r\n    height: 30px;\r\n    border: none;\r\n    justify-self: center;\r\n    transition: 0.3s;\r\n\r\n    ${({ toggleDone }) => toggleDone && css`\r\n        background-color: ${({ theme }) => theme.color.forestGreen};\r\n    `}\r\n\r\n    ${({ remove }) => remove && css`\r\n        background-color: ${({ theme }) => theme.color.crimson};\r\n    `}\r\n\r\n    &:hover {\r\n            filter: brightness(110%);\r\n            cursor: pointer;\r\n        }\r\n\r\n        &:active {\r\n            filter: brightness(120%);\r\n        }\r\n`;","import { useSelector, useDispatch } from \"react-redux\";\r\nimport { selectTasks, removeTask, toggleTaskDone } from \"../tasksSlice\";\r\nimport { List, Item, Content, Button } from \"./styled\";\r\n\r\nconst TasksList = () => {\r\n  const { tasks, hideDone } = useSelector(selectTasks);\r\n  const dispatch = useDispatch();\r\n  return (\r\n    <List>\r\n      {tasks.map(task => (\r\n        <Item\r\n          key={task.id}\r\n          hidden={task.done && hideDone}\r\n        >\r\n          <Button\r\n            onClick={() => dispatch(toggleTaskDone(task.id))}\r\n            toggleDone\r\n          >\r\n            <span>{task.done ? \"✔\" : \"\"}</span>\r\n          </Button>\r\n          <Content done={task.done}>\r\n            {task.content}\r\n          </Content>\r\n          <Button\r\n            onClick={() => dispatch(removeTask(task.id))}\r\n            remove\r\n          >\r\n            🗑\r\n          </Button>\r\n        </Item>\r\n      ))}\r\n    </List>\r\n  )\r\n};\r\n\r\nexport default TasksList;","import { Wrapper } from \"../../styled.js\";\nimport Header from \"../../common/Header\";\nimport Section from \"../../common/Section\";\nimport Form from \"./Form\";\nimport Buttons from \"./Buttons\";\nimport TasksList from \"./TasksList\";\n\nfunction Tasks() {\n  return (\n    <Wrapper>\n      <Header title=\"Lista zadań\" />\n      <Section\n        title=\"Dodaj nowe zadanie\"\n        body={<Form />}\n      />\n      <Section\n        title=\"Lista zadań\"\n        extraHeaderContent={<Buttons />}\n        body={<TasksList />}\n      />\n    </Wrapper>\n  );\n}\n\nexport default Tasks;","import Tasks from \"./features/tasks/Tasks\";\r\n\r\nconst App = () => <Tasks />;\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { createGlobalStyle } from \"styled-components\";\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n    html {\r\n        box-sizing: border-box;\r\n    }\r\n\r\n    *, ::after, ::before {\r\n        box-sizing: inherit;\r\n    }\r\n\r\n    body {\r\n        font-family: 'Montserrat', sans-serif;\r\n        background-color: ${({ theme }) => theme.color.gallery};\r\n    }\r\n`;","import { configureStore } from '@reduxjs/toolkit';\r\nimport tasksReducer from './features/tasks/tasksSlice';\r\n\r\nexport default configureStore({\r\n    reducer: {\r\n        tasks: tasksReducer,\r\n    },\r\n});","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { ThemeProvider } from 'styled-components';\nimport { Provider } from \"react-redux\";\nimport { theme } from \"./theme\";\nimport { GlobalStyle } from \"./globalStyle\";\nimport store from \"./store\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <ThemeProvider theme={theme}>\n        <GlobalStyle />\n        <App />\n      </ThemeProvider>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","export const theme = {\r\n    color: {\r\n        black: \"#000\",\r\n        silver: \"#ccc\",\r\n        alto: \"#ddd\",\r\n        gallery: \"$eee\",\r\n        crimson: \"#db143c\",\r\n        white: \"#fff\",\r\n        teal: \"#008080\",\r\n        forestGreen: \"#228c22\",\r\n    },\r\n    breakPoint: {\r\n        mobileMax: 767,\r\n    },\r\n};"],"sourceRoot":""}